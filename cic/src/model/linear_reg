import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import joblib  # For saving the model

# Load data from CSV file
df = pd.read_csv('linreg.csv')

# Preprocess categorical variables using OneHotEncoder with handle_unknown='ignore'
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
encoded_features = encoder.fit_transform(df[['Material', 'Handmade_or_Factory']])

# Create a DataFrame for the encoded features
encoded_df = pd.DataFrame(encoded_features, columns=encoder.get_feature_names_out(['Material', 'Handmade_or_Factory']))

# Combine encoded features with the original 'Condition_Rating' and 'Sustainability_Score'
df_processed = pd.concat([encoded_df, df[['Condition_Rating', 'Sustainability_Score']].reset_index(drop=True)], axis=1)

# Define Features (X) and Target (y)
X = df_processed.drop('Sustainability_Score', axis=1)
y = df_processed['Sustainability_Score']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Save the trained model and encoder
joblib.dump(model, 'linear_regression_model.pkl')
joblib.dump(encoder, 'encoder.pkl')

# Evaluate the model (optional)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print evaluation results (optional)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
